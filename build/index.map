{"version":3,"sources":["index.js"],"names":["Cookie","set","name","value","options","cookieExpires","cookiePath","cookieDomain","cookieValue","expires","mydate","Date","setDate","getDate","toGMTString","path","domain","Object","encodeURI","JSON","stringify","document","cookie","get","cookieArray","split","i","length","cookieName","decodeURI","result","parse","e","remove","console","error","module","exports"],"mappings":";AAAA,IAAMA,SAAS;AACbC,OAAK,aAAUC,IAAV,EAAgBC,KAAhB,EAAqC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACxC,QAAIC,gBAAgB,EAApB;AACA,QAAIC,aAAa,EAAjB;AACA,QAAIC,eAAe,EAAnB;AACA,QAAIC,cAAc,EAAlB;AACA,QAAIJ,QAAQK,OAAZ,EAAqB;AACnB,UAAMC,SAAS,IAAIC,IAAJ,EAAf;AACAD,aAAOE,OAAP,CAAeF,OAAOG,OAAP,KAAmBT,QAAQK,OAA1C;AACAJ,oCAA4BK,OAAOI,WAAP,EAA5B;AACD;AACD,QAAIV,QAAQW,IAAZ,EAAkBT,wBAAsBF,QAAQW,IAA9B;AAClB,QAAIX,QAAQY,MAAZ,EAAoBT,4BAA0BH,QAAQY,MAAlC;AACpB,QAAIb,iBAAiBc,MAArB,EAA6B;AAC3BT,oBAAcU,UAAUC,KAAKC,SAAL,CAAejB,KAAf,CAAV,CAAd;AACD,KAFD,MAEO;AACLK,oBAAcU,UAAUf,KAAV,CAAd;AACD;AACDkB,aAASC,MAAT,GAAqBJ,UAAUhB,IAAV,CAArB,SAAwCM,WAAxC,GAAsDH,aAAtD,GAAsEC,UAAtE,GAAmFC,YAAnF;AACD,GAnBY;AAoBbgB,OAAK,aAAUrB,IAAV,EAAgB;AACnB,QAAI,CAACA,IAAL,EAAW,OAAO,IAAP;AACX,QAAMsB,cAAcH,SAASC,MAAT,CAAgBG,KAAhB,CAAsB,IAAtB,CAApB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,YAAYG,MAAhC,EAAwCD,GAAxC,EAA6C;AAC3C,UAAME,aAAaJ,YAAYE,CAAZ,EAAeD,KAAf,CAAqB,GAArB,CAAnB;AACA,UAAIG,WAAW,CAAX,MAAkBC,UAAU3B,IAAV,CAAtB,EAAuC;AACrC,YAAI4B,eAAJ;AACA,YAAG;AACDA,mBAASX,KAAKY,KAAL,CAAWF,UAAUD,WAAW,CAAX,CAAV,CAAX,CAAT;AACD,SAFD,CAEC,OAAMI,CAAN,EAAQ;AACPF,mBAASD,UAAUD,WAAW,CAAX,CAAV,CAAT;AACD;AACD,YAAIE,WAAW,EAAf,EAAmB,OAAO,IAAP;AACnB,eAAOA,MAAP;AACD;AACF;AACD,WAAO,IAAP;AACD,GArCY;AAsCbG,UAAQ,gBAAU/B,IAAV,EAAgB;AACtB,QAAG;AACD,WAAKD,GAAL,CAASC,IAAT,EAAe,EAAf,EAAmB,CAAC,CAApB;AACA,aAAO,IAAP;AACD,KAHD,CAGE,OAAM8B,CAAN,EAAS;AACTE,cAAQC,KAAR,oBAA+BjC,IAA/B,eAA+C8B,CAA/C;AACA,aAAO,KAAP;AACD;AACF;AA9CY,CAAf;;AAiDAI,OAAOC,OAAP,GAAiBrC,MAAjB","file":"index.map","sourceRoot":"../src","sourcesContent":["const Cookie = {\n  set: function (name, value, options = {}) {\n    let cookieExpires = '';\n    let cookiePath = '';\n    let cookieDomain = '';\n    let cookieValue = '';\n    if (options.expires) {\n      const mydate = new Date();\n      mydate.setDate(mydate.getDate() + options.expires);\n      cookieExpires = `;expires=${mydate.toGMTString()}`;\n    }\n    if (options.path) cookiePath = `;path=${options.path}`;\n    if (options.domain) cookieDomain = `;domain=${options.domain}`;\n    if (value instanceof Object) {\n      cookieValue = encodeURI(JSON.stringify(value));\n    } else {\n      cookieValue = encodeURI(value);\n    }\n    document.cookie = `${encodeURI(name)}=${cookieValue}${cookieExpires}${cookiePath}${cookieDomain}`;\n  },\n  get: function (name) {\n    if (!name) return null;\n    const cookieArray = document.cookie.split('; ');\n    for (let i = 0; i < cookieArray.length; i++) {\n      const cookieName = cookieArray[i].split('=');\n      if (cookieName[0] === decodeURI(name)) {\n        let result;\n        try{\n          result = JSON.parse(decodeURI(cookieName[1]));\n        }catch(e){\n          result = decodeURI(cookieName[1]);\n        }\n        if (result === '') return null;\n        return result;\n      }\n    }\n    return null;\n  },\n  remove: function (name) {\n    try{\n      this.set(name, '', -1);\n      return true;\n    } catch(e) {\n      console.error(`remove cookie ${name} failed:`, e);\n      return false;\n    }\n  },\n};\n\nmodule.exports = Cookie;\n"]}